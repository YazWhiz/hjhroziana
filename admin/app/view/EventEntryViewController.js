/*
 * File: app/view/EventEntryViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.EventEntryViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.evententry',

    control: {
        "gridpanel": {
            rowclick: 'onGridpanelRowClick'
        },
        "button[itemId=AddEntry]": {
            click: 'onAddEntryClick'
        },
        "button[itemId=cancel]": {
            click: 'onCancelButtonClick'
        },
        "button[itemId=removeEntry]": {
            click: 'onRemoveEntryClick'
        },
        "button[itemId=saveEntry]": {
            click: 'onSaveClick'
        },
        "button[itemId=update]": {
            click: 'onUpdateClick'
        },
        "button[itemId=clearform]": {
            click: 'onClearFormClick'
        },
        "button[itemId=refresh]": {
            click: 'onRefreshClick'
        }
    },

    onGridpanelRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        var removeButton = this.lookupReference("removeEntry"),
            addButton = this.lookupReference("addentry"),
            myform = this.lookupReference("myform");

        removeButton.setDisabled(false);
        addButton.setText("Update");
        console.log(record);
        myform.reset();
        myform.loadRecord(record);
        var booking = Ext.getStore("Bookings");

        booking.load({
            params: {
                evtid: record.data.evt_id
            }
        });
    },

    onAddEntryClick: function(button, e, eOpts) {
        var form = button.up("form"),
            value = form.getForm().getValues(),
            event = Ext.getStore("Events"),
            addButton = this.lookupReference("addentry");

console.log("Yazid");
console.log(value);
console.log("Yazid");

        if(button.text == "Add New") {
            event.add(value);
        } else {
            form.updateRecord(form.getRecord());
            form.reset(true);
            addButton.setText("Add New");
        }

        event.sync({
            success: function(batch, options) {
                event.load();
                form.reset(true);
            }
        });



        /*
        var event = Ext.getStore("Events"),
            evtgrid = this.lookupReference("evtgrid"),
        plugin = evtgrid.getPlugin('evtediting');

        console.log(evtgrid);
        console.log(plugin);
        var r = Ext.create("MyApp.model.Event", {
            evt_type: "AMBENG",
            evt_date: "",
            evt_qty: 40,
            evt_remarks:""
        });


        event.insert(0,r);
        plugin.startEdit(0,0);
        */
    },

    onCancelButtonClick: function(button, e, eOpts) {
        console.log("Cancelling");
        var event = Ext.getStore("Events");
        event.rejectChanges();
        console.log("rejected");
        event.load();
    },

    onRemoveEntryClick: function(button, e, eOpts) {
        var event = Ext.getStore("Events"),
            addButton = this.lookupReference("addentry"),
            evtgrid = this.lookupReference("evtgrid"),
            sm = evtgrid.getSelectionModel(),
            myform = this.lookupReference("myform");

        console.log(sm);
        //plugin.cancelEdit();
        event.remove(sm.getSelection());
        if(event.getCount() > 0) {
            sm.select(0);
        }
        event.sync({
            success: function(batch, options) {
                event.load();
                button.setDisabled(true);
                addButton.setText("Add New");
                myform.reset();
            }
        });

    },

    onSaveClick: function(button, e, eOpts) {
        var event = Ext.getStore("Events");
        console.log(event);
        event.sync({
            success: function(batch, options) {
                event.load();
            }
        });

    },

    onUpdateClick: function(button, e, eOpts) {
                var addButton = this.lookupReference("addentry"),
                    event = Ext.getStore("Events"),
                    myform = this.lookupReference("myform");
                //console.log(event);
                event.sync();
                event.load();
        addButton.setText("Add New");
        myform.reset();
    },

    onClearFormClick: function(button, e, eOpts) {
        var addButton = this.lookupReference("addentry"),
            myform = this.lookupReference("myform").getForm();

        addButton.setText("Add New");
        myform.reset(true);

    },

    onRefreshClick: function(button, e, eOpts) {
        var addButton = this.lookupReference("addentry"),
            myform = this.lookupReference("myform").getForm();

        addButton.setText("Add New");
        myform.reset(true);
        event = Ext.getStore("Events");
        event.load();
    }

});
