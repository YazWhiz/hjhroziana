/*
 * File: app/view/CustDetail.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.CustDetail', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.custdetail',

    requires: [
        'MyApp.view.CustDetailViewModel',
        'Ext.grid.Panel',
        'Ext.grid.column.RowNumberer',
        'Ext.view.Table',
        'Ext.grid.column.Template',
        'Ext.XTemplate',
        'Ext.form.field.Number',
        'Ext.grid.column.Action',
        'Ext.grid.plugin.RowEditing'
    ],

    viewModel: {
        type: 'custdetail'
    },
    bodyBorder: true,
    title: '',

    items: [
        {
            xtype: 'gridpanel',
            bodyBorder: true,
            title: 'Customer Order Details',
            store: 'Bookings',
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 63,
                    align: 'center',
                    text: 'SN'
                },
                {
                    xtype: 'templatecolumn',
                    width: 250,
                    tpl: [
                        'Name: {cust_name}<br />',
                        'Address: {cust_addr}<br />',
                        'Email: {cust_email}<br />',
                        'Contact: {cust_contact}<br />'
                    ],
                    dataIndex: 'cust_name',
                    text: 'Cust Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'delivery_time',
                    text: 'Delivery<br />Time',
                    editor: {
                        xtype: 'textfield',
                        name: 'delivery_time'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_qty',
                    text: 'Ordered<br /> Qty',
                    editor: {
                        xtype: 'numberfield',
                        name: 'order_qty'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'last_updated',
                    text: 'Ordered<br />On'
                },
                {
                    xtype: 'actioncolumn',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                console.log(record);
                                var store = view.getStore();

                                Ext.Msg.show({
                                    title:'Delete Custoemr Order?',
                                    message: 'You are deleting a customer order. Do you want to continue?',
                                    buttons: Ext.Msg.YESNO,
                                    icon: Ext.Msg.QUESTION,
                                    fn: function(btn) {
                                        if (btn === 'yes') {
                                            console.log('Yes pressed');
                                            store.remove(record);
                                            store.sync();
                                            Ext.getStore("Events").load();
                                        } else if (btn === 'no') {
                                            console.log('No pressed');
                                        }
                                    }
                                });

                            },
                            icon: 'resources/trash.gif'
                        }
                    ]
                }
            ],
            plugins: [
                {
                    ptype: 'rowediting',
                    listeners: {
                        edit: function(editor, context, eOpts) {
                        console.log("Edited");
                        Ext.getStore("Bookings").sync();
                        Ext.getStore("Events").load();
                    },
                        canceledit: function(editor, context, eOpts) {
                        console.log("Cancel");
                    }
                    }
                }
            ]
        }
    ]

});